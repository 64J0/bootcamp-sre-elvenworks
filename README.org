#+TITLE: Desafio final bootcamp ElvenWorks
#+AUTHOR: Vinícius Gajo Marques Oliveira

* Introdução

Este repositório guarda o projeto relacionado ao desafio final do bootcamp da
ElvenWorks, terceira turma, 2022. Ao longo deste README irei apresentar tanto os
requisitos e critérios, quanto minhas ideias de como implementar o projeto.

O título do desafio foi: *Wordpress Turbinado na AWS*.

* Instruções

Para reproduzir o mesmo ambiente utilizado no desenvolvimento deste projeto,
certifique-se ter as seguintes ferramentas disponíveis no seu ambiente local:

+ ~Terraform v1.3.5~
+ ~AWS CLI 2.8.12~
+ ~Docker version 20.10.21~

** IaC - Terraform

Para provisionar os serviços na AWS, use os comandos:

#+BEGIN_SRC shell :tangle no
  cd terraform/

  # é necessário ajustar o valor em var.profile para o seu profile.
  terraform init
  terraform plan # verifique o plano
  terraform apply

  chmod 400 curso_terraform.pem # mude as permissões da chave
  ssh -i "curso_terraform.pem" ubuntu@<IP-EC2>
#+END_SRC

*** Módulos Terraform

- [X] EC2 Wordpress.
- [ ] EC2 monitoramento (Prometheus, Grafana e 1P).
- [X] RDS para o DB do Wordpress.
- [ ] CDN/WAF na instância do Wordpress.

** Ansible

+ Atenção: não está funcional por enquanto, devido à algumas limitações
  relacionadas ao próprio Docker/containers.

Para facilitar o desenvolvimento da configuração do Ansible, decidi fazer o
provisionamento num container local primeiramente. O manifesto com as
configurações desse container pode ser visto no arquivo ~./Dockerfile.Ansible~.

#+BEGIN_SRC shell :tangle no
  # criação do container
  docker build -t "ansible-wordpress" -f "Dockerfile.Ansible" "."

  # executando localmente
  docker run -d -p 80:80 ansible-wordpress:latest
  # para debugar
  # docker run -p 80:80 -it --entrypoint="bash" ansible-wordpress:latest
#+END_SRC

* Requisitos & Critérios

** Requisitos

+ Automação de ambientes com Infras as Code: Criar recursos com o Terraform e
  configurações das dependências/pacotes dentro do Linux com Ansible;
+ Provisionar 2 servidores Linux na AWS;
+ Instalar e configurar o Wordpress com Ansible na EC2;
+ Configurar banco de dados em outro servidor (RDS);
+ Arquitetura elástica com VMs e autoscaling: configurar load balancer;
+ Arquitetura com CDN/WAF na frente do wordpress;
+ Criar um ambiente mínimo de Monitoramento ou Observabilidade, usando
  Prometheus, Grafana e 1P;
+ Criar indicadores para CPU, Memória, Disco e Request HTTP ou para The Four
  Golden Signals (Latências, Tráfego, Erros e Saturação).

** Critérios

- [ ] Conhecer os principais serviços da AWS (EC2, VPC, RDS Memcached, Load
  Balancer, Autoscaling, WAF, CloudFront);
- [ ] Entender a função dos principais serviços da AWS (EC2, VPC, RDS Memcached,
  Load Balance, Autoscaling, WAF, CloudFront) e a sua correlação quando existir;
- [ ] Aplicar boas práticas de mercado no provisionamento dos principais
  serviços AWS. Exemplo: Launch Template, Tags, Gerenciamento de Conta e
  Usuário, Controle de Data transfer (In/Out), Well Architected, FinOps;
- [ ] Analisar a necessidade ou não do provisionamento de serviço na
  infraestrutura;
- [ ] Criar conta válida na AWS;
- [ ] Conhecer Ansible, suas estruturas, módulos e comandos, usados para se
  configurar o blog Wordpress;
- [ ] Entender a função dos principais módulos usados para se configurar o blog
  Wordpress;
- [ ] Aplicar boas práticas de mecado na configurção do blog Wordpress. Exemplo:
  variáveis, roles e coesão de código;
- [ ] Analisar a necessidade ou não do uso de um módulo na configuração do blog
  Wordpress;
- [ ] Criar um projeto Ansible para configurar Wordpress no EC2;
- [ ] Conhecer recurso ou módulos Terraform obrigatório (EC2, VPC, RDS) e não
  obrigatórios (Mecached, Load Balancer, Autoscaling, WAF, CloudFront) da AWS;
- [ ] Entender as principais estruturas do Terraform e a sua função (resources,
  variaveis, outputs e módulos);
- [ ] Aplicar as melhores práticas de mecado no provisionamento dos recursos na
  AWC com Terraform. Exemplo: variáveis, condicionais, loops, modularização e
  coesão de código;
- [ ] Analisar a necessidade de refatoração para melhor manutenibilidade e
  legibilidade de código;
- [ ] Criar um projeto Terraform com os recurso obrigatório (EC2, VPC, RDS) e
  não obrigatórios (Mecached, Load Balancer, Autoscaling, WAF, CloudFront);
- [ ] Conhecer The Four Golden Signals(Latência, Tráfego, Erros e Saturação);
- [ ] Entender a diferença entre Monitoramento e Observabilidade;
- [ ] Aplicar conceitos SLAs, SLOs, SLIs e Error Budgets;
- [ ] Analisar Indicadores(CPU, Memória, Disco e Request HTTP) ou The Four
  Golden Signals(Latência, Tráfego, Erros e Saturação);
- [ ] Criar um ambiente mínimo de Monitoramento ou Observabilidade, usando
  Prometheus, Grafana e 1P;

* Ideias

- [X] Usar a infraestrutura na AWS;
- [X] Provisionar os componentes com Terraform;
- [X] Gerenciar a configuração com Ansible;
- [ ] Usar como exemplo de Literate DevOps;
- [X] GitHub Action para verificar o formato e validar o código Terraform;
- [ ] Criar GitHub Actions para automatizar o processo de provisionamento e
  destruição dos serviços;

* AWS CLI

** Comandos Úteis

+ Listar os profiles: ~aws configure list-profiles~
+ Listar os buckets s3: ~aws s3 ls~
